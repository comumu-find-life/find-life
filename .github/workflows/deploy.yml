name: Deploy to EC2

on:
  push:
    branches:
      - fl-master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Docker 빌드 설정
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      # 3. Docker Hub 로그인
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # 4. .env 파일 생성
      - name: Create .env file from GitHub secret
        run: |
          echo "FL_DB_URL=${{ secrets.FL_RDS_DB_URL }}" > .env
          echo "FL_DB_URL=${{ secrets.FL_RDS_DB_URL }}" > .env
          echo "FL_DB_USER_NAME=${{ secrets.FL_DB_USER_NAME }}" >> .env
          echo "FL_RDS_PASSWORD=${{ secrets.FL_RDS_PASSWORD }}" >> .env
          echo "FL_CHAT_DB_USER_NAME=${{ secrets.FL_CHAT_DB_USER_NAME }}" >> .env
          echo "FL_CHAT_DOMAIN_BASE_URL=${{ secrets.FL_CHAT_DOMAIN_BASE_URL }}" >> .env
          echo "FL_CHAT_DB_URL=${{ secrets.FL_CHAT_DB_URL }}" >> .env
          echo "FL_MAP_API_KEY=${{ secrets.FL_MAP_API_KEY }}" >> .env
          echo "AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}" >> .env
          echo "ANDROID_OAUTH_CLIENT_KEY=${{ secrets.ANDROID_OAUTH_CLIENT_KEY }}" >> .env
          echo "IOS_OAUTH_CLIENT_KEY=${{ secrets.IOS_OAUTH_CLIENT_KEY }}" >> .env
          echo "PAYPAL_CLIENT_ID=${{ secrets.PAYPAL_CLIENT_ID }}" >> .env
          echo "PAYPAL_CLIENT_SECRET=${{ secrets.PAYPAL_CLIENT_SECRET }}" >> .env
          echo "JWT_KEY=${{ secrets.JWT_KEY }}" >> .env
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env


      - name: Upload .env to EC2
        uses: appleboy/scp-action@v1.0.0
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ubuntu
          port: 22
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          source: ./.env
          target: /home/ubuntu/
          debug: true
          protocol: tcp
          timeout: 30s
          tar_exec: false # tar 압축 비활성화


      - name: Upload docker-compose.yml to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ubuntu
          port: 22
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          source: ./docker-compose.yml
          target: /home/ubuntu/
          debug: true
          protocol: tcp
          timeout: 30s
          command_timeout: 10m
          tar_exec: tar
          proxy_port: 22
          proxy_timeout: 30s

      - name: SSH to EC2 and deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ubuntu
          port: 22
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            export PATH=$PATH:/usr/local/bin

            # Docker 로그인
            sudo docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

            # 기존 컨테이너들 중지 및 제거
            sudo docker ps -a --filter "name=cozy-chatting" -q | grep -q . && sudo docker stop cozy-chatting && sudo docker rm -f cozy-chatting || true
            sudo docker ps -a --filter "name=cozy-api" -q | grep -q . && sudo docker stop cozy-api && sudo docker rm -f cozy-api || true

            # 최신 fl-chatting 이미지 다운로드 및 실행
            sudo docker pull minseok2000/cozy-chatting:latest
            sudo docker run -d \
              --name cozy-chatting \
              --platform linux/amd64 \
              -p 8082:8082 \
              --env-file /home/ubuntu/.env \
              minseok2000/cozy-chatting:latest

            # 최신 fl-api 이미지 다운로드 및 실행
            sudo docker pull minseok2000/cozy-api:latest
            sudo docker run -d \
              --name cozy-api \
              --platform linux/amd64 \
              -p 8080:8080 \
              --env-file /home/ubuntu/.env \
              minseok2000/cozy-api:latest
      
