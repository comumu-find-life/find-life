name: Deploy to EC2

on:
  push:
    branches:
      - fl-master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Generate .env file
        run: |
          echo JWT_KEY=${{ secrets.JWT_KEY }} >> .env
          echo AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} >> .env
          echo AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }} >> .env
          echo FL_CHAT_DB_URL=${{ secrets.FL_CHAT_DB_URL }} >> .env
          echo FL_CHAT_DB_USER_NAME=${{ secrets.FL_CHAT_DB_USER_NAME }} >> .env
          echo FL_DB_URL=${{ secrets.FL_RDS_DB_URL }} >> .env
          echo FL_RDS_USER_NAME=${{ secrets.FL_RDS_USER_NAME }} >> .env
          echo FL_RDS_PASSWORD=${{ secrets.FL_RDS_PASSWORD }} >> .env
          echo FL_MAP_API_KEY=${{ secrets.FL_MAP_API_KEY }} >> .env
          echo ANDROID_OAUTH_CLIENT_KEY=${{ secrets.ANDROID_OAUTH_CLIENT_KEY }} >> .env
          echo IOS_OAUTH_CLIENT_KEY=${{ secrets.IOS_OAUTH_CLIENT_KEY }} >> .env
          echo PAYPAL_CLIENT_ID=${{ secrets.PAYPAL_CLIENT_ID }} >> .env
          echo PAYPAL_CLIENT_SECRET=${{ secrets.PAYPAL_CLIENT_SECRET }} >> .env

      - name: Upload .env and Docker Compose to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ubuntu
          port: 22

          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          source: |
            ./docker-compose.yml
            ./.env
          target: /home/ubuntu/

      - name: SSH to EC2 and deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ubuntu
          port: 22
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            export PATH=$PATH:/usr/local/bin
            
            # Docker 로그인
            sudo docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
            
            # fl-chatting 컨테이너 중지 및 제거
            sudo docker ps -q --filter "name=cozy-chatting" | grep -q . && sudo docker stop cozy-chatting && sudo docker rm -f cozy-chatting || true
            sudo docker stop cozy-api
            sudo docker rm -f cozy-api
            # fl-api 컨테이너 중지 및 제거
            sudo docker ps -q --filter "name=cozy-api" | grep -q . && sudo docker stop cozy-api && sudo docker rm -f cozy-api || true
            sudo docker stop cozy-chatting
            sudo docker rm -f cozy-chatting
            
            
            # 최신 fl-chatting 이미지 다운로드 및 실행
            sudo docker pull minseok2000/cozy-chatting:latest
            sudo docker run -d \
              --name cozy-chatting \
              --platform linux/amd64 \
              -p 8082:8082 \
              --env-file /home/ubuntu/.env \
              minseok2000/cozy-chatting:latest

            # 최신 fl-api 이미지 다운로드 및 실행
            sudo docker pull minseok2000/cozy-api:latest
            sudo docker run -d \
              --name cozy-api \
              --platform linux/amd64 \
              -p 8080:8080 \
              --env-file /home/ubuntu/.env \
              minseok2000/cozy-api:latest
